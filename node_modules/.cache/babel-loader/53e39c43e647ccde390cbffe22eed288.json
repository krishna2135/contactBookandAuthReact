{"ast":null,"code":"import { CONTACT_CREATE, CONTACT_DELETE, CONTACT_DELETE_ALL, CONTACT_FETCH_ALL, CONTACT_UPDATE } from '../constants/contactContsant';\nexport const contactReducer = (contacts = [], action) => {\n  switch (action.type) {\n    case CONTACT_FETCH_ALL:\n      return action.payload;\n\n    case CONTACT_CREATE:\n      return [...contacts, action.payload];\n\n    case CONTACT_UPDATE:\n      return contacts.map(c => c._id === action.payload._id ? action.payload : c);\n\n    case CONTACT_DELETE:\n      return contacts.filter(c => c._id !== action.payload);\n\n    case CONTACT_DELETE_ALL:\n      return contacts.filter(function (c) {\n        return action.payload.indexOf(c._id) === -1;\n      });\n\n    default:\n      return contacts;\n  }\n};\n/**\n *\n *\n *\n *\n */","map":{"version":3,"sources":["E:/contact-bok-mern/contact-book-react/src/reducers/contactReducer.js"],"names":["CONTACT_CREATE","CONTACT_DELETE","CONTACT_DELETE_ALL","CONTACT_FETCH_ALL","CONTACT_UPDATE","contactReducer","contacts","action","type","payload","map","c","_id","filter","indexOf"],"mappings":"AAAA,SACEA,cADF,EAEEC,cAFF,EAGEC,kBAHF,EAIEC,iBAJF,EAKEC,cALF,QAMO,8BANP;AAQA,OAAO,MAAMC,cAAc,GAAG,CAACC,QAAQ,GAAG,EAAZ,EAAgBC,MAAhB,KAA2B;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,iBAAL;AACE,aAAOI,MAAM,CAACE,OAAd;;AACF,SAAKT,cAAL;AACE,aAAO,CAAC,GAAGM,QAAJ,EAAcC,MAAM,CAACE,OAArB,CAAP;;AAEF,SAAKL,cAAL;AACE,aAAOE,QAAQ,CAACI,GAAT,CAAcC,CAAD,IAClBA,CAAC,CAACC,GAAF,KAAUL,MAAM,CAACE,OAAP,CAAeG,GAAzB,GAA+BL,MAAM,CAACE,OAAtC,GAAgDE,CAD3C,CAAP;;AAIF,SAAKV,cAAL;AACE,aAAOK,QAAQ,CAACO,MAAT,CAAiBF,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUL,MAAM,CAACE,OAAxC,CAAP;;AAEF,SAAKP,kBAAL;AACE,aAAOI,QAAQ,CAACO,MAAT,CAAgB,UAAUF,CAAV,EAAa;AAClC,eAAOJ,MAAM,CAACE,OAAP,CAAeK,OAAf,CAAuBH,CAAC,CAACC,GAAzB,MAAkC,CAAC,CAA1C;AACD,OAFM,CAAP;;AAIF;AACE,aAAON,QAAP;AApBJ;AAsBD,CAvBM;AAyBP;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {\n  CONTACT_CREATE,\n  CONTACT_DELETE,\n  CONTACT_DELETE_ALL,\n  CONTACT_FETCH_ALL,\n  CONTACT_UPDATE,\n} from '../constants/contactContsant';\n\nexport const contactReducer = (contacts = [], action) => {\n  switch (action.type) {\n    case CONTACT_FETCH_ALL:\n      return action.payload;\n    case CONTACT_CREATE:\n      return [...contacts, action.payload];\n\n    case CONTACT_UPDATE:\n      return contacts.map((c) =>\n        c._id === action.payload._id ? action.payload : c\n      );\n\n    case CONTACT_DELETE:\n      return contacts.filter((c) => c._id !== action.payload);\n\n    case CONTACT_DELETE_ALL:\n      return contacts.filter(function (c) {\n        return action.payload.indexOf(c._id) === -1;\n      });\n\n    default:\n      return contacts;\n  }\n};\n\n/**\n *\n *\n *\n *\n */\n"]},"metadata":{},"sourceType":"module"}